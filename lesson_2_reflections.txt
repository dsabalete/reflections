What happens when you initialize a repository? Why do you need to do it?

    When a repository is initialized, the required config files are created
    and git begins tracking its content. It is needed in order to track files
    of the repository.


How is the staging area different from the working directory and the 
repository? What value do you think it offers?

    The working directory is where there are all files of the project, but the 
    staging area is a subset of files of the working directory that will be 
    commited in the next commit.
    

How can you use the staging area to make sure you have one commit per logical 
change?

    You can compare what you have in the staging area with what you have 
    previously commited. This way, the staging area works as a sandbox where 
    you can place the changes that will be commited.


What are some situations when branches would be helpful in keeping your history 
organized? How would branches help?

    When a quick fix is needed, or it is desired some experimentation on the 
    code, or a new version with a different localization is desired but it is 
    also needed to keep the main development aside, branches come to rescue.
    All that cases can be developed in separated branches.


How do the diagrams help you visualize the branch structure?

    It is common to say that a picture is worth a thousand words, so 
    graphically it is easier to understand how a development has evolved.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

    A new commit is created mixing changes of the branches, all commits of one 
    branch are incorporated to the other branch, ordered by time and the merged 
    branch can be deleted. In the diagram is represented as two lines joining a
    new node and that node belongs to one of the branches.


